// Profile service for user profile management// Connects to the database via API callsinterface ProfileData {  id: string;  username: string;  email: string;  firstName: string;  lastName: string;  phone?: string;  address?: string;  createdAt: string;  updatedAt?: string;  lastLogin?: string;}interface UserStats {  totalOrders: number;  totalSpent: number;  deliveredOrders: number;  activeSubscriptions: number;}interface ProfileResponse {  profile: ProfileData;  stats: UserStats;}interface UpdateProfileData {  firstName?: string;  lastName?: string;  phone?: string;  address?: string;}interface PasswordUpdateData {  currentPassword: string;  newPassword: string;}const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';class ProfileService {  private async makeRequest(endpoint: string, options: RequestInit = {}) {    const token = localStorage.getItem('authToken');        const defaultHeaders = {      'Content-Type': 'application/json',      ...(token && { 'Authorization': `Bearer ${token}` })    };    const response = await fetch(`${API_BASE_URL}${endpoint}`, {      ...options,      headers: {        ...defaultHeaders,        ...options.headers      }    });    if (!response.ok) {      const errorText = await response.text();      throw new Error(errorText || `HTTP error! status: ${response.status}`);    }    return response.json();  }  async getUserProfile(): Promise<ProfileResponse> {    try {      // Use backend API first      const data = await this.makeRequest('/users/profile');      return data;    } catch (error) {      console.warn('Backend profile API not available, falling back to localStorage:', error);      // Fallback to localStorage for development/demo purposes      return this.getFallbackProfile();    }  }  private async getFallbackProfile(): Promise<ProfileResponse> {    const currentUser = localStorage.getItem('currentUser');    if (!currentUser) {      throw new Error('No user data found');    }    const userData = JSON.parse(currentUser);    const fakeUsers = JSON.parse(localStorage.getItem('fakeUsers') || '[]');    const fullUserData = fakeUsers.find((u: any) => u.email === userData.email);    if (!fullUserData) {      throw new Error('User profile not found');    }    // Create profile data matching the interface    const profile: ProfileData = {      id: userData.id,      username: fullUserData.email.split('@')[0], // Generate username from email      email: userData.email,      firstName: userData.firstName,      lastName: userData.lastName,      phone: fullUserData.phone || userData.phone || '',      address: fullUserData.address || userData.address || '',      createdAt: new Date().toISOString(),      updatedAt: new Date().toISOString()    };    // Mock stats    const stats: UserStats = {      totalOrders: Math.floor(Math.random() * 10) + 1,      totalSpent: parseFloat((Math.random() * 500 + 50).toFixed(2)),      deliveredOrders: Math.floor(Math.random() * 8) + 1,      activeSubscriptions: Math.floor(Math.random() * 2)    };    return { profile, stats };  }  async updateUserProfile(data: UpdateProfileData): Promise<{ message: string; profile: ProfileData }> {    try {      // Try to update via backend first      const response = await this.makeRequest('/users/profile', {        method: 'PUT',        body: JSON.stringify(data)      });      return response;    } catch (error) {      console.warn('Backend profile API not available, falling back to localStorage:', error);      // Fallback to localStorage for development/demo purposes      return this.updateFallbackProfile(data);    }  }  private async updateFallbackProfile(data: UpdateProfileData): Promise<{ message: string; profile: ProfileData }> {    const currentUser = localStorage.getItem('currentUser');    if (!currentUser) {      throw new Error('No user data found');    }    const userData = JSON.parse(currentUser);        // Update the current user data    const updatedUserData = {      ...userData,      firstName: data.firstName || userData.firstName,      lastName: data.lastName || userData.lastName,      phone: data.phone || userData.phone,      address: data.address || userData.address    };    // Update fakeUsers array    const fakeUsers = JSON.parse(localStorage.getItem('fakeUsers') || '[]');    const userIndex = fakeUsers.findIndex((u: any) => u.email === userData.email);        if (userIndex !== -1) {      fakeUsers[userIndex] = {        ...fakeUsers[userIndex],        fullName: `${updatedUserData.firstName} ${updatedUserData.lastName}`,        phone: data.phone || fakeUsers[userIndex].phone || '',        address: data.address || fakeUsers[userIndex].address || ''      };      localStorage.setItem('fakeUsers', JSON.stringify(fakeUsers));    }    // Update current user in localStorage    localStorage.setItem('currentUser', JSON.stringify(updatedUserData));    // Create updated profile data    const profile: ProfileData = {      id: updatedUserData.id,      username: updatedUserData.email.split('@')[0],      email: updatedUserData.email,      firstName: updatedUserData.firstName,      lastName: updatedUserData.lastName,      phone: data.phone || updatedUserData.phone || '',      address: data.address || updatedUserData.address || '',      createdAt: new Date().toISOString(),      updatedAt: new Date().toISOString()    };    return {      message: 'Profile updated successfully',      profile    };  }  async updatePassword(data: PasswordUpdateData): Promise<{ message: string }> {    try {      // Try to update via backend first      const response = await this.makeRequest('/users/profile/password', {        method: 'PUT',        body: JSON.stringify(data)      });      return response;    } catch (error) {      console.warn('Backend not available, password update not supported in fallback mode:', error);      throw new Error('Password update requires backend connection');    }  }}export const profileService = new ProfileService();export type { ProfileData, UserStats, UpdateProfileData };